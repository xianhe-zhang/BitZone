{"ast":null,"code":"import React from'react';import{BrowserRouter as Router,Route,Redirect,Switch}from'react-router-dom';import Users from'./user/pages/Users';import NewPlace from'./places/pages/NewPlace';import UserPlaces from'./places/pages/UserPlaces';import UpdatePlace from'./places/pages/UpdatePlace';import Auth from'./user/pages/Auth';import MainNavigation from'./shared/components/Navigation/MainNavigation';import{AuthContext}from'./shared/context/auth-context';import{useAuth}from'./shared/hooks/auth-hook';var App=function App(){var _useAuth=useAuth(),token=_useAuth.token,login=_useAuth.login,logout=_useAuth.logout,userId=_useAuth.userId;var routes;if(token){routes=/*#__PURE__*/React.createElement(Switch,null,/*#__PURE__*/React.createElement(Route,{path:\"/\",exact:true},/*#__PURE__*/React.createElement(Users,null)),/*#__PURE__*/React.createElement(Route,{path:\"/:userId/places\",exact:true},/*#__PURE__*/React.createElement(UserPlaces,null)),/*#__PURE__*/React.createElement(Route,{path:\"/places/new\",exact:true},/*#__PURE__*/React.createElement(NewPlace,null)),/*#__PURE__*/React.createElement(Route,{path:\"/places/:placeId\"},/*#__PURE__*/React.createElement(UpdatePlace,null)),/*#__PURE__*/React.createElement(Redirect,{to:\"/\"}));}else{routes=/*#__PURE__*/React.createElement(Switch,null,/*#__PURE__*/React.createElement(Route,{path:\"/\",exact:true},/*#__PURE__*/React.createElement(Users,null)),/*#__PURE__*/React.createElement(Route,{path:\"/:userId/places\",exact:true},/*#__PURE__*/React.createElement(UserPlaces,null)),/*#__PURE__*/React.createElement(Route,{path:\"/auth\"},/*#__PURE__*/React.createElement(Auth,null)),/*#__PURE__*/React.createElement(Redirect,{to:\"/auth\"}));}return/*#__PURE__*/React.createElement(AuthContext.Provider,{value:{isLoggedIn:!!token,token:token,userId:userId,login:login,logout:logout}},/*#__PURE__*/React.createElement(Router,null,/*#__PURE__*/React.createElement(MainNavigation,null),/*#__PURE__*/React.createElement(\"main\",null,routes)));};export default App;","map":{"version":3,"sources":["/Users/marioxzhang/Desktop/bitzone-finished/frontend/src/App.js"],"names":["React","BrowserRouter","Router","Route","Redirect","Switch","Users","NewPlace","UserPlaces","UpdatePlace","Auth","MainNavigation","AuthContext","useAuth","App","token","login","logout","userId","routes","isLoggedIn"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OACEC,aAAa,GAAIC,CAAAA,MADnB,CAEEC,KAFF,CAGEC,QAHF,CAIEC,MAJF,KAKO,kBALP,CAOA,MAAOC,CAAAA,KAAP,KAAkB,oBAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,yBAArB,CACA,MAAOC,CAAAA,UAAP,KAAuB,2BAAvB,CACA,MAAOC,CAAAA,WAAP,KAAwB,4BAAxB,CACA,MAAOC,CAAAA,IAAP,KAAiB,mBAAjB,CACA,MAAOC,CAAAA,cAAP,KAA2B,+CAA3B,CACA,OAASC,WAAT,KAA4B,+BAA5B,CACA,OAASC,OAAT,KAAwB,0BAAxB,CAEA,GAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,EAAM,CAChB,aAAyCD,OAAO,EAAhD,CAAQE,KAAR,UAAQA,KAAR,CAAeC,KAAf,UAAeA,KAAf,CAAsBC,MAAtB,UAAsBA,MAAtB,CAA8BC,MAA9B,UAA8BA,MAA9B,CAEA,GAAIC,CAAAA,MAAJ,CAEA,GAAIJ,KAAJ,CAAW,CACTI,MAAM,cACJ,oBAAC,MAAD,mBACE,oBAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,CAAgB,KAAK,KAArB,eACE,oBAAC,KAAD,MADF,CADF,cAIE,oBAAC,KAAD,EAAO,IAAI,CAAC,iBAAZ,CAA8B,KAAK,KAAnC,eACE,oBAAC,UAAD,MADF,CAJF,cAOE,oBAAC,KAAD,EAAO,IAAI,CAAC,aAAZ,CAA0B,KAAK,KAA/B,eACE,oBAAC,QAAD,MADF,CAPF,cAUE,oBAAC,KAAD,EAAO,IAAI,CAAC,kBAAZ,eACE,oBAAC,WAAD,MADF,CAVF,cAaE,oBAAC,QAAD,EAAU,EAAE,CAAC,GAAb,EAbF,CADF,CAiBD,CAlBD,IAkBO,CACLA,MAAM,cACJ,oBAAC,MAAD,mBACE,oBAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,CAAgB,KAAK,KAArB,eACE,oBAAC,KAAD,MADF,CADF,cAIE,oBAAC,KAAD,EAAO,IAAI,CAAC,iBAAZ,CAA8B,KAAK,KAAnC,eACE,oBAAC,UAAD,MADF,CAJF,cAOE,oBAAC,KAAD,EAAO,IAAI,CAAC,OAAZ,eACE,oBAAC,IAAD,MADF,CAPF,cAUE,oBAAC,QAAD,EAAU,EAAE,CAAC,OAAb,EAVF,CADF,CAcD,CAED,mBACE,oBAAC,WAAD,CAAa,QAAb,EACE,KAAK,CAAE,CACLC,UAAU,CAAE,CAAC,CAACL,KADT,CAELA,KAAK,CAAEA,KAFF,CAGLG,MAAM,CAAEA,MAHH,CAILF,KAAK,CAAEA,KAJF,CAKLC,MAAM,CAAEA,MALH,CADT,eASE,oBAAC,MAAD,mBACE,oBAAC,cAAD,MADF,cAEE,gCAAOE,MAAP,CAFF,CATF,CADF,CAgBD,CAxDD,CA0DA,cAAeL,CAAAA,GAAf","sourcesContent":["import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch\n} from 'react-router-dom';\n\nimport Users from './user/pages/Users';\nimport NewPlace from './places/pages/NewPlace';\nimport UserPlaces from './places/pages/UserPlaces';\nimport UpdatePlace from './places/pages/UpdatePlace';\nimport Auth from './user/pages/Auth';\nimport MainNavigation from './shared/components/Navigation/MainNavigation';\nimport { AuthContext } from './shared/context/auth-context';\nimport { useAuth } from './shared/hooks/auth-hook';\n\nconst App = () => {\n  const { token, login, logout, userId } = useAuth();\n\n  let routes;\n\n  if (token) {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/places/new\" exact>\n          <NewPlace />\n        </Route>\n        <Route path=\"/places/:placeId\">\n          <UpdatePlace />\n        </Route>\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/auth\">\n          <Auth />\n        </Route>\n        <Redirect to=\"/auth\" />\n      </Switch>\n    );\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: !!token,\n        token: token,\n        userId: userId,\n        login: login,\n        logout: logout\n      }}\n    >\n      <Router>\n        <MainNavigation />\n        <main>{routes}</main>\n      </Router>\n    </AuthContext.Provider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}